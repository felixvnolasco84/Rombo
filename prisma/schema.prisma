// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique 
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?   
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
}


model VerificationToken {
  identifier String @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    String  @id @default(cuid()) @map("_id")
  slug  String  @unique
  title String
  img   String?
  Posts Post[]
}

model Post {
  id        String    @id @default(cuid()) @map("_id")
  createdAt DateTime  @default(now())
  slug      String    @unique
  title     String
  previewDesc String
  desc      String
  img       String?
  views     Int       @default(0)
  catSlug   String
  cat       Category  @relation(fields: [catSlug], references: [slug])
  userEmail String
  user      User      @relation(fields: [userEmail], references: [email])
  comments  Comment[]
  references String[]
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc      String
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
}

model LineResearch {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  title     String  
  slug      String?  @unique   
  desc      String   @default("")
  img       String?
  activities Activity[]  
  projects   Project[]  
}

model Activity {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  title     String
  desc      String  
  lineId    String
  line      LineResearch @relation(fields: [lineId], references: [id])  
}

model Project {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  title     String
  desc      String
  img       String?
  lineId    String
  line      LineResearch @relation(fields: [lineId], references: [id])  
}

model Member {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  name      String
  slug      String   @unique @default("")
  email     String   @unique  
  role      Rol[]
  socialMedia SocialMedia[]
  specialty   String
  school      String
  degree      String
  yearGrad    String
  bio         String
  img         String  
}

model SocialMedia {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  url       String
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id])
}

model Gallery {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  title     String
  desc      String    
  images    Image[]
}

model Image {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  title     String
  desc      String
  img       String
  galleryId String
  gallery   Gallery @relation(fields: [galleryId], references: [id])  
}

model Rol {
  id        String   @id @default(cuid()) @map("_id")
  name     String
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id])
  createdAt DateTime @default(now())
}