// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String         @id @default(cuid()) @map("_id")
  name               String?
  createdAt          DateTime?      @default(now())
  updatedAt          DateTime?      @updatedAt
  email              String         @unique
  emailVerified      DateTime?
  brands             Brand[]
  image              String?
  stripe_customer_id String? @unique
  password           String?
  requests           Request[]
  accounts           Account[]
  sessions           Session[]
  comments           Comment[]
  subscriptions      Subscription[]
  Notification       Notification[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id           String         @id @default(cuid()) @map("_id")
  desc         String
  documents    Document[]
  userEmail    String
  user         User           @relation(fields: [userEmail], references: [email])
  requestId    String
  request      Request        @relation(fields: [requestId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
}

type Document {
  name String
  url  String
}

model Request {
  id           String         @id @default(cuid()) @map("_id")
  title        String
  description  String
  category     String
  documents    Document[]
  status       String
  priority     String
  brandId      String
  brand        Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  userEmail    String
  user         User           @relation(fields: [userEmail], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  comments     Comment[]
  deadline     DateTime       @default("2021-12-31T23:59:59.000Z") 
  Notification Notification[]
}

model Category {
  id    String  @id @default(cuid()) @map("_id")
  slug  String  @unique
  title String
  img   String?
}

model Brand {
  id           String         @id @default(cuid()) @map("_id")
  img          String?
  title        String
  description  String
  industry     String
  website      String?
  documents    Document[]
  userEmail    String
  user         User           @relation(fields: [userEmail], references: [email])
  requests     Request[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
}

model Notification {
  id        String   @id @default(cuid()) @map("_id")
  message   String
  type      String
  brandId   String?
  brand     Brand?   @relation(fields: [brandId], references: [id])
  requestId String?
  request   Request? @relation(fields: [requestId], references: [id])
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  read      Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}


model Subscription {
  id        String   @id @default(cuid()) @map("_id")  
  subscriptionId String
  customerId    String
  customer      User     @relation(fields: [customerId], references: [stripe_customer_id])
  createdAt DateTime @default(now())
}